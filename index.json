[{"categories":["技術"],"contents":"世界の輪郭 私が手を伸ばすと，あなたに触れます。\n触れた手を通して，あなたは私から影響を受け取りますし，私にもその温もりと手触りを伝えます。\n手の届く範囲の存在は，ある意味で世界とのUIです。 何故なら，私が世界に干渉し，影響を与えたという知らせを受け取れるからです。\nドアも，ガスコンロも，学校も，地図も，全て一種のUIです。 誰もが意識せずとも情報を瞬時に受け取ることができ，それに対し無意識裡に納得していることでしょう。\n余儀の無い合意 私がたまに頭に載せているこれ，何だと思いますか？\nこのように改まって訊かれたら，時計だと気づく人も多いかもしれません。 でも，何の文脈も無く「時計を載せているね」と気付いてくれた人は意外と少ないです。\n本来の時計が丸いのは，時刻（のHH:MM:SSの部分）は \\(S^1\\) の形をしているからです。 もしかしたら日時計が先に存在して，時刻が後からその形に定まったのかもしれません。 でもそれは結局のところ，太陽の角度を一日見た時に，近似的には \\(S^1\\) の形をしていたからでしょう。\n仮想空間でも時間は同様に進みます。 違う点として，仮想空間における時計が丸い必要はどこにもありません。球体でも星型でも，不定形でも良いですよね。 実際に，私の作った時計は吊り下がったガラス細工の形をしていて，時刻の変化に対して瞬時に反応します。\nでも，人は私の時計から情報を無意識裡に受け取れませんでした。\nこの時計を常に見慣れていれば，いつの日にか時計だと即座に納得してもらえる日が来るかもしれません。\nしかし現実のような強い物理的制約は，仮想空間においては，もはや存在しません。 物理的な制約無しに合意形成を達成できるのか，合意されるとしたらどのような形状なのか，これからが気になりますね。\n他の例として，カラーピッカーがあります。\nこの「よくある」カラーピッカーは，左の明度と彩度の領域が \\([0,1]^2\\) の空間を持っていて，右の色相の部分が \\(S^1\\) ……のはずですが，実装の都合で \\([0,1]\\) の空間を持っています。\nそれに対し，私はこんなカラーピッカーを作ってみました。\nこの中央の楔のような物体は，操作面に対して常に垂直になるように細工してあります。 ついでに，三角形の領域の外には持ち出せないようにしてあります。 このように，自由度を縛ることにより，対象の本質的な「形」を明確にできます。\nこの楔は，水平位置によって \\(\\left\\lbrace \\left( s,v \\right) | s,v \\in \\left[ 0,1 \\right] \\land h+s \u0026lt; 1 \\right\\rbrace\\) の情報が取れ，これが明度と彩度に対応します。 この領域が三角形であることは，明度が0の時に彩度が必ず0であることを反映しています。\nさらに，楔の回転により色相を得られます。向く方向を固定されているので，当然 \\(S^1\\) の情報を得られますね。\nついでなので，楔の上下移動で透明度を指定できるようにしました。 楔の真下の位置には小さい点が表示されるので，今選んでいる色が分からなくなることはありません。\nこのように，制約が少ない世界では，より柔軟で本質的なUIを設計できるのです。\n計算機と皮膚のインターフェース ハードウェアについても，現状では視聴覚ばかりが実用化されているように見えます。\nもちろん，研究室レベルでは触覚や嗅覚を刺激提示するデバイスをいくつも目にしました。 それらのデバイスが実用化されない理由には，もちろん安全性の保証や生産技術といった課題もあることでしょう。\n例えば，触覚提示のうち昔から見られた物として「振動の提示」があります。 これ以外の提示が難しいという理由もあるとは思いますが，これ以外のハプティクスを目にする機会はとても少ないと感じます。\nこの状況では，触覚は「単音のみが鳴る音声」と同じ形をしています。でも，実際の触覚はこれよりも遥かに複雑な形をしています。 現状がなかなか進展しないのは，これ以上の新しい触覚の「形」を扱う方法について，まだ人類が思いついて合意できていないためだと思うのです。\nところで，振動の提示こそがハプティクスだという理解をしている方を複数見かけています。 たしかに現状ではそう理解されても問題はないですし，仕方のない事だと思います。\nしかし，皮膚には主に4種類のセンサーがあります。\n直流成分を検出して圧力を感じるメルケル細胞 低周波成分に反応してパタパタした振動を感じるマイスナー小体 高周波に反応して音叉に触れた時のような痺れるような振動を感じるパチニ小体 横ずれに応答するルフィニ終末 これらに対応させれば，例えば撫でるような感触であったり，トントンと気付かせるような「知らせ」の方法が取れます。けれど今しばらくは，計算機と皮膚のインターフェースがあまり綺麗に対応していない状態で，何らかの合意を取っていくしかないのでしょう。\n一度取った合意を覆すのは，合意を取る以上に難しい行為です。\nしかし，その対象の「形」を制約の中で常に問い続けることにより，より本質的で，より綺麗な存在が生まれ続けることを静かに願っています。\n追伸\n皮膚の触覚センサについて詳しめに書かれている資料を見つけましたので，ご参考までに。\nhttps://doi.org/10.11509/isciesci.64.4_126\n","permalink":"https://blog.yukatayu.tech/blog/vr_interface/","tags":["表現","VR","願い"],"title":"世界に触れる"},{"categories":["日記"],"contents":"人が意図を持つとき，そこには「願い」があります。\n私が意図をもって技術に触れる時，大抵は消極的な願いを持っています。\n端的に言うと，私が触れた全てのものについて，私が不要であり続けて欲しいという願いがあります。\nなぜなら，私が居ないと成り立たない物は，私が居なくなったら無価値になると考えているからです。 身の程知らずに聞こえるかもしれませんが，これはつまり，自分の子が独り立ちして欲しいという想いと同じつもりです。\n私は自分で管理できない物を作り続けることを夢見ています。 だって，余りに大きい物を抱え込むと自分の足取りが蹣跚としてしまい，行きたい場所へ行けないではないですか。\nそれに，大きな責任というのは，得てして社会に存在する悪意を受け止める必要を伴います。 後ろ指をさされないためには，居場所が分からない方が好都合なのです。 責任を持たないというのはそういうことです。\n私は縁側に腰かけつつ，おそらくは麗らかであったはずの世の中に降る雨の砌を眺めていたいのです。\nこれは余談ですが，私の活動の多くは消極的な願いから生まれるものです。 当然，私の仕事がいつ消えても良いと思っています。 私が普段から少しずつ貯金しているのは，嘘をつかないためかもしれませんね。\n結局のところ，ある存在と長く関わることとは，互いの清祥を願うことだと思います。\nだからこそ，日常では刹那的な付き合いを大切にしようと思うのは，高慢でしょうか。\n","permalink":"https://blog.yukatayu.tech/blog/wish_for_technology/","tags":["願い"],"title":"願い"},{"categories":["技術"],"contents":"はじめに この記事は，考え途中のアイデアをそのまま書き出したものです。\n読んだからと言って，何か結論が得られるものではありません。\n次回： まだです。 動機 普段プログラムを書く際，各プログラムのインターフェースを定義した後に，それぞれのプログラムを書き始めると思います。\nですが，開かれたシステムでない限り，そのインターフェースは実装の結果生まれて物でしかないと思うのです。 実装に取り掛かる前に，ノード間通信を定義させられるのは，早すぎる具体化なのではないでしょうか。\nここで言う開かれたシステムというのは，例えばWWWのことです。 もし仮に，HTTPの定義を皆が勝手に拡張していたら，世の中のブラウザは今ほど便利ではなかったでしょう。 TCPで通信しているところに意味不明なトラフィックが流入していたら，TCPのスライディングウィンドウが一瞬で閉じてしまい，快適に通信できなかったでしょう。\nこのように「よそ」と繋がる可能性のある存在は，自身の解する言語を事前に表明しておく必要があります。\nここで，システムが開いているか閉じているかというのは，ネットワークのレイヤーによるのではないかという考えが生じます。 実際，OSI参照モデルの7層（アプリケーション層）は，閉じていると言っていい物が殆どでしょう。 ここで言う開いている/閉じているというのは，二値を取る性質のものではないことに注意してください。\n話を戻しましょう。\n協調動作する複数のプログラムを書く際に，「各プログラムの入出力を定義する」のは，閉じたシステムの内側に立ち入る行為です。 実際に必要とされているものは，「システム全体」と「外界」の間の通信のみを定義すれば開発を開始できるような存在ではないでしょうか。\n実際のところ，「システム全体」と「外界」の通信というのは，従来の開発手法を文脈とすると余りに自明です。だって「各プログラムの入出力」に含まれていますからね。\nそれでは，複数のプログラムからなるシステムの内側を記述するような存在について考えると，これがなかなか難しいのです。\n素朴な考え 例えば，サーバ（Sとします）に2つのクライアント（それぞれA,Bとします）が接続しているゲームを考えます。\n「AがBを攻撃した」という処理を行う時，全体としては「b.hp -= a.attack_power」という処理が行われます。\nこれを実行する際には，各処理が行われる場所について，例えば以下のような物が考えられます。\nステータス管理も攻撃処理もサーバで行う Aからサーバに，攻撃したことを報告する サーバから全体に，新たなBのHPを報告する ステータス管理は各個人で行い，攻撃処理は被攻撃者が行う Aからサーバに，攻撃したことと，その攻撃力を報告する サーバからBに，攻撃を受けたことと，その攻撃力を報告する Bは，減算後のHPをサーバに報告する ステータス管理は各個人で行い，攻撃処理は攻撃者が行う Aから全体に，Bの新たなHPを報告する これらは全て，システム全体では「b.hp -= a.attack_power」をしているだけです。 しかし，その評価を行う場所を変化させるためだけに，必要なインターフェースが大きく変化しています。\n例えば，ある処理をサーバーで行うことを S[_] で表してみます。 同様に，Aで行う場合には A[_]，Bで行う時には B[_] で表します。\n例えば，Aの世界でだけBのHPを10減らすには，A[b.hp -= 10] と表記します。\n先ほどの3つの例をこの表記で書き直してみると，それぞれ以下のようになりそうです。\nA[ S[b.hp -= a.attack_power] ] A[ B[b.hp -= A[a.attack_power]] ] A[ b.hp -= a.attack_power ] ここで生じる疑問として，3つ目の処理において「Aから全体に通知」といった処理が飛ばされているように見えます。 しかし，システム全体の話をしているのですから，計算結果は即座に通知されて当然に見えます。\nそこで，各変数の単位（誰に対して定義されるか）と，所有者（変数の問い合わせ先）を定義する必要があります。\nこの二つは同じものに見えるかもしれませんが，例えば「クライアントの人数分，サーバ側で保持する変数」という物も考えられますね。 （もしかしたらこのケースについては Node→_ なる値を確保することで解決するかもしれませんが，その場合には書き込み権限やロック周りが複雑になる気がします…… ）\nでは，ここまでを纏めて，疑似的なコードを書いてみます。\nNetwork { S -\u0026gt; { A, B } } struct Player { int hp; int atk; } ケース1： ステータス管理も攻撃処理もサーバで行う\nS[ [A] Player a; [B] Player b; ] A[ when A.attack { S[ b.hp -= a.atk ]; } ] ケース2： ステータス管理は各個人で行い，攻撃処理は被攻撃者が行う\nA[ Player a; ] B[ Player b; ] A[ when A.attack { B[ b.hp -= a.atk ]; } ] ケース3： ステータス管理は各個人で行い，攻撃処理は攻撃者が行う\nA[ Player a; ] B[ Player b; ] A[ when A.attack { b.hp -= a.atk } ] 表記の見た目は非本質ですので，直感で書いています。 そのうちちゃんと考えますね。\n次回は，システムを後から拡張する場合について考えてみようと思います。\nではまた。\n","permalink":"https://blog.yukatayu.tech/blog/sync_language_01/","tags":["言語","同期"],"title":"同期に特化した言語を考えてみる（１）"},{"categories":["日記"],"contents":"ブログを始めました あなたは，普段ふと考えたことをどこに書き留めているでしょうか。\n私の場合，短いメモはtwitterへ投稿し，長いメモは手元のObsidianに纏めています。\nけれども，その前者のみ公開されるのも変な話かと思い，こうしてブログを始めてみました。\n殆どの内容は取りとめもない思考のメモになりそうですが，少しでも面白い物がありましたら幸いです。\n","permalink":"https://blog.yukatayu.tech/blog/hello_world/","tags":["挨拶"],"title":"初めまして"}]